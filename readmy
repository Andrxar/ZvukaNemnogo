# ZvukaNemnogo: Автоматический синтез аудиокниг

Этот репозиторий содержит набор скриптов для автоматического синтеза аудиокниг из текстовых файлов (`.txt` или `.fb2`) с помощью TTS API и GitHub Actions.

Система спроектирована для работы с большими текстами и способна автоматически продолжать озвучивание с того места, где она остановилась, даже после полной остановки процесса.

## Ключевые особенности

*   **Полная автоматизация:** Процесс запускается через GitHub Actions и не требует локальных вычислений.
*   **Возобновляемая работа:** Прогресс озвучивания сохраняется после каждого запуска. Скрипт автоматически находит последний озвученный фрагмент и продолжает со следующего.
*   **Работа с большими файлами:** Текст книги автоматически разбивается на небольшие фрагменты, подходящие для API.
*   **Контроль размера:** Работа автоматически останавливается при достижении заданного общего размера аудиофайлов, чтобы не превышать лимиты хранилища артефактов.
*   **Гибкая настройка:** Голос, интонация, частота дискретизации и другие параметры легко настраиваются в Python-скрипте.

## Как это работает

1.  **GitHub Action** запускается вручную (`workflow_dispatch`).
2.  Скрипт `tts_batch.py` читает текстовый файл книги и разбивает его на numerowane фрагменты.
3.  Для определения точки возобновления скрипт ищет и читает файл `tts_batch.log`, в котором хранится информация о последнем успешно обработанном фрагменте.
4.  Скрипт начинает в цикле отправлять текстовые фрагменты на TTS API и получать в ответ аудиофайлы.
5.  Полученные аудиофайлы сохраняются в папку `output_mp3`.
6.  Когда общий размер файлов в `output_mp3` достигает лимита (например, 450 МБ), скрипт останавливается.
7.  **Сохранение результатов:**
    *   Папка `output_mp3` упаковывается в `mp3_results.zip` и загружается как **артефакт** воркфлоу, откуда его можно скачать.
    *   Файл `tts_batch.log` с обновленным прогрессом **сохраняется (коммитится) обратно в репозиторий**.

---

## Порядок работы

### 1. Начало озвучки НОВОЙ книги

1.  **Подготовьте репозиторий:**
    *   Поместите текстовый файл книги (например, `my_book.fb2`) в корневую папку репозитория.
    *   **ВАЖНО:** Если в репозитории есть файл `tts_batch.log` от предыдущей книги, **удалите его**. Это необходимо, чтобы озвучка началась с самого начала.
2.  **Настройте скрипт:**
    *   Откройте файл `tts_batch.py` для редактирования.
    *   В секции "НАСТРОЙКИ ПОЛЬЗОВАТЕЛЯ" укажите имя вашего файла в переменной `TEXT_FILE_NAME`.
    *   Настройте другие параметры по желанию (`VOICE_NAME`, `AUDIO_SIZE_LIMIT_MB` и т.д.).
3.  **Сохраните изменения:** Сделайте коммит всех изменений (новый файл книги, измененный `tts_batch.py` и удаленный `tts_batch.log`).
4.  **Запустите воркфлоу:**
    *   Перейдите на вкладку **Actions**.
    *   В списке слева выберите **TTS Batch Synthesis**.
    *   Нажмите кнопку **Run workflow**.

### 2. ПРОДОЛЖЕНИЕ озвучки текущей книги

1.  **Запустите вооркфлоу:**
    *   Перейдите на вкладку **Actions**.
    *   Выберите **TTS Batch Synthesis**.
    *   Нажмите кнопку **Run workflow**.
2.  **Дождитесь завершения:** Процесс отработает и остановится либо по достижению лимита размера, либо когда вся книга будет озвучена.
3.  **Скачайте результаты:**
    *   Перейдите на страницу только что завершенного запуска (Summary).
    *   Внизу страницы найдите раздел **Artifacts** и скачайте архив `mp3_results.zip`.
4.  **Освободите место (ОБЯЗАТЕЛЬНО):**
    *   После скачивания **удалите артефакт** с сайта GitHub. Это необходимо, чтобы не превысить общий лимит хранилища репозитория (500 МБ для бесплатных аккаунтов). Прогресс при этом не потеряется, так как он хранится в `tts_batch.log`.
5.  **Повторяйте** шаги 1-4 до тех пор, пока вся книга не будет озвучена.

## Структура файлов

*   `.github/workflows/tts_batch1.yml`: Главный файл, описывающий логику GitHub Actions.
*   `tts_batch.py`: Основной Python-скрипт, выполняющий всю работу.
*   `requirements.txt`: Список Python-библиотек, необходимых для работы.
*   `tts_batch.log`: **Файл состояния.** Хранит прогресс озвучивания. **Создается и обновляется автоматически.**
